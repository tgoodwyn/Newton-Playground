package cards;

import cardMgt.CardManager;
import guiActions.NextAction;
import javax.swing.JButton;
import javax.swing.JPanel;

/**
 This class provides a card with a specific appearance and functionality.

 @author dmr
 */
public class First extends Card {

/**
 Constructs a new instance of the subclass of <code>Card</code>. This
 construction is based on using the NetBeans tools for building a
 <code>JPanel</code>. This class extends <code>Card</code> rather than
 <code>JPanel</code>. <code>Card</code> provides extended functionality and
 allows for a type grouping. You might wonder why a class is defined where there
 is only one instance. The reason is that you might want one card to have many
 instances. This might be thought of as providing a specified set of components
 and functions that are common to many cards.

 @param cm as a CardManger
 @param name as a String
 */
public First(CardManager cm, String name) {
    super(cm, name);
    initComponents();
}

/**
 This method is called from within the constructor to initialize the form.
 WARNING: Do NOT modify this code. The content of this method is always
 regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nextButtonCard = new javax.swing.JButton(new NextAction("managed next",cm.getManager()));
        parentTextButtonCard = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        parentButtonTextDisplay = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(153, 204, 255));

        jLabel1.setText("First card in deck");

        nextButtonCard.setText("next");

        parentTextButtonCard.setText("parent");
        parentTextButtonCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parentTextButtonCardActionPerformed(evt);
            }
        });

        parentButtonTextDisplay.setEditable(false);
        parentButtonTextDisplay.setColumns(20);
        parentButtonTextDisplay.setLineWrap(true);
        parentButtonTextDisplay.setRows(5);
        parentButtonTextDisplay.setWrapStyleWord(true);
        jScrollPane1.setViewportView(parentButtonTextDisplay);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parentTextButtonCard)
                    .addComponent(nextButtonCard)
                    .addComponent(jLabel1))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(nextButtonCard)
                        .addGap(18, 18, 18)
                        .addComponent(parentTextButtonCard)))
                .addContainerGap(94, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

/**
 Provides the action implementation for the <code>parentTextButton</code> card
 button. It displays a formatted string that describes the button's parent. The
 string is then displayed in <code>parentButtonTextDisplay</code>.

 @param evt as an Action Event
 */
    private void parentTextButtonCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parentTextButtonCardActionPerformed
        JButton jb = (JButton) evt.getSource();
        JPanel jp = (JPanel) jb.getParent();
        //get the description of the parent panel
        //and break it into the comma separated 'fields'
        String[] desc = jp.toString().split(",");
        //use a StringBuilder to assemble the parts with new lines.
        StringBuilder sb = new StringBuilder();
        for (String s : desc) {
            sb.append(s).append("\n");
        }
        // "\n" is a new line character.
        parentButtonTextDisplay.setText(" class is \n" + jp.getClass() + " parent is " + sb.toString());
    }//GEN-LAST:event_parentTextButtonCardActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextButtonCard;
    private javax.swing.JTextArea parentButtonTextDisplay;
    private javax.swing.JButton parentTextButtonCard;
    // End of variables declaration//GEN-END:variables
}
